{
  "name": "winbox",
  "description": "Configures tools for development on Windows",
  "long_description": "Winbox Cookbook\n===============\nThe *Winbox* cookbook configures Windows workstations for development. It configures the following features on a system:\n\n* [Git](http://www.git-scm.com/) for source control\n* A text editor (configurable, [VSCode](https://code.visualstudio.com/) by default)\n* [ConEmu](https://conemu.github.io/) terminal replacement\n* [Chocolatey](https://chocolatey.org) package manager\n* [PSGet](https://github.com/psget/psget) PowerShell module package manager\n* [PSReadline](https://github.com/lzybkr/PSReadLine) module for PowerShell\n* Other environmental settings optimized for development\n\n*Winbox* is for developers and operators regardless of platform background:\n\n* **Windows users:** You live and breathe Windows. If you're a\n  developer, that probably means maybe a lot of C#, .NET, and\n  PowerShell and even the Win32 API. The tools in this cookbook\n  are best of breed for that kind of work. If you're new to\n  development on Windows, this cookbook gives you the tools used by\n  the most experienced Windows developers.\n* **Unix users on Windows:** You're primarily a Linux-focused developer\n  who, for whatever reason, finds herself using Windows. This\n  toolset makes sure you won't feel lost without standard-issue Linux\n  capabilities such as a usable terminal, remote package manager, and\n  real text editors with programming language syntax support.\n\nRequirements\n------------\nThis cookbook supports only the Windows operating system. It requires\nWindows Server 2008 R2 / Windows 7 or later.\n\nFor the local workstation configuration use case (i.e. where you're\nnot managing the node via a Chef Server), you must have the following\nprerequisites installed:\n\n* `chef-client` and `berkshelf`: to install these, just install the\n  [Chef-DK](https://downloads.chef.io/chef-dk), which includes them.\n* `git` (recommended): The best way to obtain this cookbook is by\n  cloning it from its source on *Github*. You can install `git` for Windows by visiting\n  [Github](http://msysgit.github.io/) in case you don't already have a\n  package manager.\n\n## Local workstation configuration\nIf your goal is to configure a local workstation (possibly the one\nyou're using to read this) without using a Chef Server, simply do the\nfollowing from a PowerShell session:\n\n```powershell\n# Clone this repository and cd to it\ngit clone https://github.com/adamedx/winbox\ncd winbox\n\n# Use Berkshelf to download all cookbook dependencies:\nberks vendor cookbooks\n\n# Run `chef-client` in local mode to configure the workstation!\nchef-client -z --color -o 'winbox'\n```\n\nAfter a brief period of downloading and installing features and\nconfiguring the system, your workstation should be ready to go!\n\n## Using with your Chef Server\n\nThis cookbook can be used on a managed Chef node like any other cookbook simply by uploading\nthe cookbook to your Chef Server and configuring a node via bootstrap\nor setting the node's runlist to use a recipe. You can then configure it by\nconverging it with a `chef-client` run.\n\n### winbox::default\nUse this recipe to get common tools required for development.\n\n## Using your workstation\nAll right, you've installed everything, so what can you do? Here are a\nfew things to try:\n\n* **Run ConEmu!** ConEmu should be available on your Start Menu /\n  Screen, or by running ConEmu64.exe from within a command-line shell.\n  ConEmu is a replacement for the limited terminal application used by\n  default on Windows. The ConEmu terminal is much more like those on\n  Linux desktop systems; the window is resizable, it supports ANSI color\n  sequences, line-wrapped (instead of block) text selection, and many,\n  many other advanced features. By default, ConEmu will run a PowerShell\n  session in its terminal, though it can be configured to run a\n  different shell.\n* **Use PSReadline with PowerShell!** You should already be using\n  PowerShell as your command-line shell and primary method of\n  interacting with Windows. If you're not familiar with\n  [PSReadline](https://github.com/lzybkr/PSReadLine), it enhances any\n  PowerShell, even those run in the default terminal application, so\n  that Emacs-style line editing keyboard shortcuts including command\n  history search are available when editing commands. This makes the\n  experience of using PowerShell very similar to Unix shells like `bash`,\n  which support this editing capability by default.\n* **Use a real text editor** to edit... code! Whether it's Ruby, C++,\n  C#, Java, or PowerShell, any of the editors installed by this cookbook\n  can perform syntax highlighting and in general offer the advanced\n  editing capabilities required by developers. By default, the cookbook\n  will install [Visual Studio Code](https://code.visualstudio.com/)\n  which you can launch from PowerShell by executing the command\n  `code`. You can override this default using the cookbook's `editor` attribute.\n  See subsequent sections for details on configuring other editors\n  such as Atom, Emacs, and Vim.\n* **Install software using Chocolatey.** The Chocolatey package\n  manager is similar to those on Linux. Try it out -- usage is similar\n  to `apt-get` on Debian systems:\n\n  `choco install sysinternals`\n\n* **Install PowerShell modules using PSGet.** [PSGet](https://github.com/psget/psget)\n  is like Chocolatey, except it's focused on PowerShell modules rather than\n  applications:\n\n  `install-module pester`\n\n* **Get detailed command help** with *man*. PowerShell provides a\n  default alias `man` for the `get-help` cmdlet which is similar to\n  the Unix `man` command. Unfortunately, this useful alias defaults to\n  giving very limited help, requiring you to remember to pass the\n  `-full` switch to `man`. This cookbook redefines the alias so that\n  it gives full help by default.\n* **Add some color to your PowerShell prompt**. You'll only see this\n  feature if you don't already have a PowerShell profile (see the\n  `$PROFILE` variable in PowerShell for the location of this file). If\n  you don't have one, this cookbook creates one for you that will add\n  color to the prompt and also show the name of the system you're\n  using along with your username. For advanced usage, it shows the\n  exit code of the last Windows process launched by the shell, and the\n  prompt changes color based the success or failure of the last\n  PowerShell cmdlet that was executed.\n* **Run a PowerShell script!** This cookbook unlocks the\n  revolutionary power of using a scripting language to... run scripts :smile:.\n  It does this by doing something you've most likely already done on\n  your workstation, but in case you haven't, or you're setting up a\n  new workstation, it sets the PowerShell execution policy to\n  `Unrestricted` so that you can run scripts without signing them.\n* **Use the ssh client.** Because the `git` client distribution\n  installed by this cookbook also contains an `ssh` client, you can\n  use it simply by executing the `ssh` command from PowerShell or\n  other shells on the system.\n* **Get to your Documents directory fast**. This cookbook defines an\n  alias `docs` that will change your current directory to your\n  *Documents* directory, even if it's configured to a network\n  location. Very useful since Windows developer workstations often\n  contain more traditional \"document\" content. Consider this one a\n  bonus feature.\n\n### Advanced usage and notes\n\nAdvanced usage includes customizing the file `~/winbox-ps-profile.ps1`\nused by this cookbook's PowerShell profile. Editing this file is an\neasy way to update the PowerShell profile directly.\n\nHere is additional behavior related to PowerShell profiles:\n\n* The cookbook never alters an existing PowerShell profile.\n* To use this cookbook's PowerShell profile if you have an existing\n  profile, rename your PowerShell profile and run the `powershell_dev`\n  recipe or any other recipe such as `default` that includes it.\n* The PowerShell profile used by this cookbook actually uses the\n  content in `/winbox-ps-profile.ps1`, which is not updated if it\n  already exists. To get profile changes from subsequent revisions of\n  the cookbook, rename `~/winbox-ps-profile.ps1` and re-run the\n  correct recipe.\n* Note that because `~/winbox-ps-profile.ps1` is not updated by this\n  cookbook if it exists, it's safe for you to edit its content to\n  customize your profile.\n\n## Recipe inventory\n\nIn addition to the default recipe, additional recipes with more\nfocused functionality may be used.\n\n### Standard recipes\nThe following recipes are all included by the default recipe. However,\nif you need to use only a subset of the recipes included by the\ndefault, you can list the desired subset of the recipes below in your\nrun list when executing `chef-client`.\n\n### winbox::chocolatey_install\nInstalls the Chocolatey package manager. This recipe is an alternative\nto the default recipe in the\n[Chocolatey cookbook](https://github.com/chocolatey/chocolatey-cookbook),\nwhich at the time of this cookbook's authoring had a number of blocking\nissues that prevented it from installing Chocolatey reliably.\n\n### winbox::console\nInstalls ConEmu for Windows as an alternative to the built-in terminal (console) in Windows.\n\n### winbox::powershell_dev\nSets PowerShell execution policy for Windows so you can run PowerShell\nscripts.  Creating a default profile can be disabled by setting the 'create_profile' attribute to false.\n\n### winbox::readline\nInstalls the PSReadline module for Readline emulation with PowerShell.\n\n### winbox::editor\nInstalls a text editor -- the default is Visual Studio Code, which can\nbe overridden via the `editor` attribute for this cookbook.\n\n### winbox::git\nInstalls Posh-Git, a module to help make the git command line tool more PowerShell friendly.\n\n### Advanced recipes\nThe following recipes are not included by the default recipe -- you'll\nneed to explicitly add them to your run list to use them. They are not\npart of the default set because they are applicable for significantly\nless common use cases or they may have an unquantifiable impact to other\napplications or configuration of the system.\n\n#### winbox::debugger\nInstalls the Windows debuggers from the Windows SDK. The\n`debugger_install_path` attribute allows customization of the\ndirectory into which the debuggers are installed.\n\n### Recipe customization\n\nThe following attributes can be used to customize the cookbook's\nbehavior:\n\n#### `editor` attribute\n\nThe `editor` attribute determines the text editor to install via the\n`editor` (and thus `default`) recipes. It's not mandatory to specify\nits value explicitly since it has a default value, but it **must** be\nset to a valid value if its overridden:\n\n| `editor` value | Description                                           |\n|----------------|-------------------------------------------------------|\n| `:vscode`      | **Default**. Sets the editor to *Visual Studio Code*. |\n| `:atom`        | Sets the editor to the Atom editor.                   |\n| `:emacs`       | Sets the editor to the Emacs.                         |\n| `:vim`         | Sets the editor to Vim                                |\n\n#### `debugger_install_path` attribute\n\nThe `debugger_install_path` attribute is a file system path into which\nthe debuggers should be installed.\n\n## TODO\n\n* Add unit tests\n* Integration tests\n* Change this cookbook to a resource-only cookbook\n* Expand motivation section with topics such as\n  * The sad state of the modern Windows developer\n  * A comparison with Linux: Windows and Windows + Winbox\n  * Prescriptive guidance -- how Windows users should use Windows with Winbox\n\n## Motivation for Winbox\n\nThe *Winbox* cookbook delivers a Windows workstation user experience optimized\nfor software developers:\n\n* It's a way of demonstrating to users of\n  both Windows and non-Windows platforms that there is indeed a presciptive\n  toolset for development on Windows.\n* It introduces users to the tools they need for a modern development\n  experience on the Windows platform.\n\n*Winbox* is necessary because the tools that are readily accessible to\ndevelopers in a default installation of Windows are tedious and\ninefficient relics of Windows' single-tasking, non-networked, 16-bit heritage when\nWindows was primarily used by non-technical office workers and home\nusers. During those early days of Windows prior to the move to the NT\nkernel, technical users like developers were to be found using\nvarious flavors of Unix, mainframe operating systems, and even Windows\ncousin OS/2.\n\nWindows has changed dramatically since those times, accelerating past\nits peers in several areas of operating system engineering. However,\nthe tools used by developers around command-line and text interaction\nwith the system, as well as package management and acquisition of open\nsource software components have lagged significantly, in some cases\nstaying frozen in time along with the pre-NT kernel.\n\nThe PowerShell shell has been a notable exception to this stagnation,\nbut even here the otherwise excellent PowerShell which in many ways\nsurpasses peers like the well-regarded `bash` shell and its relatives\nhas been shackled by the terminal application used by humans to access\nit. In the year 2015, this terminal is largely unchanged from the\nterminal released with the original version of 32-bit Windows, Windows\nNT 3.1 in *1992*.\n\n### Closing gaps\n\nThe tools in *Winbox* fill in the omissions in Windows for developers,\nand allow Windows users to have the same workflow as those using, say,\nLinux, and thus to experience the gains in developers productivity associated\nwith such non-Windows systems.\n\nPerhaps more importantly, *Winbox* can show Windows developers that\nthey need to uplevel their workflow in order to stay relevant in a\nworld that contains far more Linux and open-source-influenced tooling\nand assumptions than the late 20th and very early 21st centuries.\n\nLicense and Authors\n-------------------\nCopyright:: Copyright (c) 2015 Adam Edwards\n\nLicense:: Apache License, Version 2.0\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n",
  "maintainer": "Adam Edwards",
  "maintainer_email": "adamedx",
  "license": "Apache 2.0",
  "platforms": {
    "windows": ">= 0.0.0"
  },
  "dependencies": {
    "git": ">= 0.0.0",
    "windows": ">= 0.0.0"
  },
  "recommendations": {
  },
  "suggestions": {
  },
  "conflicting": {
  },
  "providing": {
  },
  "replacing": {
  },
  "attributes": {
  },
  "groupings": {
  },
  "recipes": {
  },
  "version": "0.1.68",
  "source_url": "",
  "issues_url": ""
}